# Generated by Django 2.1.4 on 2018-12-30 11:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Atom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('element', models.CharField(max_length=2)),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('z', models.FloatField()),
                ('occupancy', models.FloatField()),
                ('part', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='machines name')),
            ],
        ),
        migrations.CreateModel(
            name='CifFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cif', models.FileField(blank=True, null=True, upload_to='cifs')),
                ('sha256', models.CharField(blank=True, max_length=256, null=True)),
                ('date_created', models.DateTimeField(blank=True, null=True, verbose_name='upload date')),
                ('date_updated', models.DateTimeField(blank=True, null=True, verbose_name='change date')),
                ('filesize', models.PositiveIntegerField(blank=True, null=True)),
                ('data', models.CharField(blank=True, max_length=256, null=True)),
                ('cell_length_a', models.FloatField(blank=True, null=True)),
                ('cell_length_b', models.FloatField(blank=True, null=True)),
                ('cell_length_c', models.FloatField(blank=True, null=True)),
                ('cell_angle_alpha', models.FloatField(blank=True, null=True)),
                ('cell_angle_beta', models.FloatField(blank=True, null=True)),
                ('cell_angle_gamma', models.FloatField(blank=True, null=True)),
                ('cell_volume', models.FloatField(blank=True, null=True)),
                ('cell_formula_units_Z', models.PositiveIntegerField(blank=True, null=True)),
                ('space_group_name_H_M_alt', models.CharField(blank=True, max_length=255, null=True)),
                ('space_group_name_Hall', models.CharField(blank=True, max_length=255, null=True)),
                ('space_group_centring_type', models.CharField(blank=True, max_length=255, null=True)),
                ('space_group_IT_number', models.PositiveIntegerField(blank=True, null=True)),
                ('space_group_crystal_system', models.CharField(blank=True, max_length=255, null=True)),
                ('space_group_symop_operation_xyz', models.TextField(blank=True, null=True)),
                ('audit_creation_method', models.CharField(blank=True, max_length=255, null=True)),
                ('chemical_formula_sum', models.CharField(blank=True, max_length=255, null=True)),
                ('chemical_formula_weight', models.CharField(blank=True, max_length=255, null=True)),
                ('exptl_crystal_description', models.CharField(blank=True, max_length=255, null=True)),
                ('exptl_crystal_colour', models.CharField(blank=True, max_length=255, null=True)),
                ('exptl_crystal_size_max', models.FloatField(blank=True, null=True)),
                ('exptl_crystal_size_mid', models.FloatField(blank=True, null=True)),
                ('exptl_crystal_size_min', models.FloatField(blank=True, null=True)),
                ('exptl_absorpt_coefficient_mu', models.FloatField(blank=True, null=True)),
                ('exptl_absorpt_correction_type', models.CharField(blank=True, max_length=255, null=True)),
                ('diffrn_ambient_temperature', models.FloatField(blank=True, null=True)),
                ('diffrn_radiation_wavelength', models.FloatField(blank=True, null=True)),
                ('diffrn_radiation_type', models.CharField(blank=True, max_length=255, null=True)),
                ('diffrn_source', models.CharField(blank=True, max_length=255, null=True)),
                ('diffrn_measurement_device_type', models.CharField(blank=True, max_length=255, null=True)),
                ('diffrn_reflns_number', models.IntegerField(blank=True, null=True)),
                ('diffrn_reflns_av_R_equivalents', models.PositiveIntegerField(blank=True, null=True)),
                ('diffrn_reflns_theta_min', models.FloatField(blank=True, null=True)),
                ('diffrn_reflns_theta_max', models.FloatField(blank=True, null=True)),
                ('diffrn_reflns_theta_full', models.FloatField(blank=True, null=True)),
                ('diffrn_measured_fraction_theta_max', models.FloatField(blank=True, null=True)),
                ('diffrn_measured_fraction_theta_full', models.FloatField(blank=True, null=True)),
                ('reflns_number_total', models.PositiveIntegerField(blank=True, null=True)),
                ('reflns_number_gt', models.PositiveIntegerField(blank=True, null=True)),
                ('reflns_threshold_expression', models.CharField(blank=True, max_length=255, null=True)),
                ('reflns_Friedel_coverage', models.FloatField(blank=True, null=True)),
                ('computing_structure_solution', models.CharField(blank=True, max_length=255, null=True)),
                ('computing_structure_refinement', models.CharField(blank=True, max_length=255, null=True)),
                ('refine_special_details', models.TextField(blank=True, null=True)),
                ('refine_ls_abs_structure_Flack', models.CharField(blank=True, max_length=255, null=True)),
                ('refine_ls_structure_factor_coef', models.CharField(blank=True, max_length=255, null=True)),
                ('refine_ls_weighting_details', models.TextField(blank=True, null=True)),
                ('refine_ls_number_reflns', models.PositiveIntegerField(blank=True, null=True)),
                ('refine_ls_number_parameters', models.PositiveIntegerField(blank=True, null=True)),
                ('refine_ls_number_restraints', models.PositiveIntegerField(blank=True, null=True)),
                ('refine_ls_R_factor_all', models.FloatField(blank=True, null=True)),
                ('refine_ls_R_factor_gt', models.FloatField(blank=True, null=True)),
                ('refine_ls_wR_factor_ref', models.FloatField(blank=True, null=True)),
                ('refine_ls_wR_factor_gt', models.FloatField(blank=True, null=True)),
                ('refine_ls_goodness_of_fit_ref', models.FloatField(blank=True, null=True)),
                ('refine_ls_restrained_S_all', models.FloatField(blank=True, null=True)),
                ('refine_ls_shift_su_max', models.FloatField(blank=True, null=True)),
                ('refine_ls_shift_su_mean', models.FloatField(blank=True, null=True)),
                ('refine_diff_density_max', models.FloatField(blank=True, null=True)),
                ('refine_diff_density_min', models.FloatField(blank=True, null=True)),
                ('diffrn_reflns_av_unetI_netI', models.FloatField(blank=True, null=True)),
                ('database_code_depnum_ccdc_archive', models.CharField(blank=True, max_length=255, null=True)),
                ('shelx_res_file', models.TextField(blank=True, null=True)),
                ('atoms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='scxrd.Atom')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=250, null=True, verbose_name='first name')),
                ('last_name', models.CharField(max_length=250, verbose_name='last name')),
                ('workgroup', models.CharField(blank=True, max_length=250, null=True, verbose_name='work group')),
                ('company', models.CharField(blank=True, max_length=250, null=True, verbose_name='company')),
                ('mail_adress', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.CharField(default='', max_length=200, verbose_name='experiment name')),
                ('number', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='number')),
                ('machine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, parent_link=True, to='scxrd.Machine', verbose_name='diffractometer')),
                ('sum_formula', models.CharField(blank=True, max_length=300)),
                ('measure_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='measurement date')),
                ('submit_date', models.DateField(blank=True, null=True, verbose_name='sample submission date')),
                ('result_date', models.DateField(blank=True, null=True, verbose_name='structure results date')),
                ('cif', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cif_file', to='scxrd.CifFile', verbose_name='cif file')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scxrd.Customer')),
                ('operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiment', to=settings.AUTH_USER_MODEL, verbose_name='operator')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Solvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='solvents name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SumFormula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('C', models.FloatField(default=0)),
                ('D', models.FloatField(default=0)),
                ('H', models.FloatField(default=0)),
                ('N', models.FloatField(default=0)),
                ('O', models.FloatField(default=0)),
                ('Cl', models.FloatField(default=0)),
                ('Br', models.FloatField(default=0)),
                ('I', models.FloatField(default=0)),
                ('F', models.FloatField(default=0)),
                ('S', models.FloatField(default=0)),
                ('P', models.FloatField(default=0)),
                ('Ac', models.FloatField(default=0)),
                ('Ag', models.FloatField(default=0)),
                ('Al', models.FloatField(default=0)),
                ('Am', models.FloatField(default=0)),
                ('Ar', models.FloatField(default=0)),
                ('As', models.FloatField(default=0)),
                ('At', models.FloatField(default=0)),
                ('Au', models.FloatField(default=0)),
                ('B', models.FloatField(default=0)),
                ('Ba', models.FloatField(default=0)),
                ('Be', models.FloatField(default=0)),
                ('Bi', models.FloatField(default=0)),
                ('Bk', models.FloatField(default=0)),
                ('Ca', models.FloatField(default=0)),
                ('Cd', models.FloatField(default=0)),
                ('Ce', models.FloatField(default=0)),
                ('Cf', models.FloatField(default=0)),
                ('Cm', models.FloatField(default=0)),
                ('Co', models.FloatField(default=0)),
                ('Cr', models.FloatField(default=0)),
                ('Cs', models.FloatField(default=0)),
                ('Cu', models.FloatField(default=0)),
                ('Dy', models.FloatField(default=0)),
                ('Er', models.FloatField(default=0)),
                ('Eu', models.FloatField(default=0)),
                ('Fe', models.FloatField(default=0)),
                ('Fr', models.FloatField(default=0)),
                ('Ga', models.FloatField(default=0)),
                ('Gd', models.FloatField(default=0)),
                ('Ge', models.FloatField(default=0)),
                ('He', models.FloatField(default=0)),
                ('Hf', models.FloatField(default=0)),
                ('Hg', models.FloatField(default=0)),
                ('Ho', models.FloatField(default=0)),
                ('In', models.FloatField(default=0)),
                ('Ir', models.FloatField(default=0)),
                ('K', models.FloatField(default=0)),
                ('Kr', models.FloatField(default=0)),
                ('La', models.FloatField(default=0)),
                ('Li', models.FloatField(default=0)),
                ('Lu', models.FloatField(default=0)),
                ('Mg', models.FloatField(default=0)),
                ('Mn', models.FloatField(default=0)),
                ('Mo', models.FloatField(default=0)),
                ('Na', models.FloatField(default=0)),
                ('Nb', models.FloatField(default=0)),
                ('Nd', models.FloatField(default=0)),
                ('Ne', models.FloatField(default=0)),
                ('Ni', models.FloatField(default=0)),
                ('Np', models.FloatField(default=0)),
                ('Os', models.FloatField(default=0)),
                ('Pa', models.FloatField(default=0)),
                ('Pb', models.FloatField(default=0)),
                ('Pd', models.FloatField(default=0)),
                ('Pm', models.FloatField(default=0)),
                ('Po', models.FloatField(default=0)),
                ('Pr', models.FloatField(default=0)),
                ('Pt', models.FloatField(default=0)),
                ('Pu', models.FloatField(default=0)),
                ('Ra', models.FloatField(default=0)),
                ('Rb', models.FloatField(default=0)),
                ('Re', models.FloatField(default=0)),
                ('Rh', models.FloatField(default=0)),
                ('Rn', models.FloatField(default=0)),
                ('Ru', models.FloatField(default=0)),
                ('Sb', models.FloatField(default=0)),
                ('Sc', models.FloatField(default=0)),
                ('Se', models.FloatField(default=0)),
                ('Si', models.FloatField(default=0)),
                ('Sm', models.FloatField(default=0)),
                ('Sn', models.FloatField(default=0)),
                ('Sr', models.FloatField(default=0)),
                ('Ta', models.FloatField(default=0)),
                ('Tb', models.FloatField(default=0)),
                ('Tc', models.FloatField(default=0)),
                ('Te', models.FloatField(default=0)),
                ('Th', models.FloatField(default=0)),
                ('Ti', models.FloatField(default=0)),
                ('Tl', models.FloatField(default=0)),
                ('Tm', models.FloatField(default=0)),
                ('U', models.FloatField(default=0)),
                ('V', models.FloatField(default=0)),
                ('W', models.FloatField(default=0)),
                ('Xe', models.FloatField(default=0)),
                ('Y', models.FloatField(default=0)),
                ('Yb', models.FloatField(default=0)),
                ('Zn', models.FloatField(default=0)),
                ('Zr', models.FloatField(default=0)),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='solvents_used',
            field=models.ManyToManyField(blank=True, to='scxrd.Solvent', verbose_name='solvents used'),
        ),
        migrations.AddField(
            model_name='ciffile',
            name='sumform_exact',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='scxrd.SumFormula'),
        ),
    ]
